
// We require Adept v2.8+ since we utilze the new `pragma windres` directive.
// Without it, we would have to manually compile and link our windows resource file.
pragma compiler_version '2.8'  

// This file can only be compiled for windows
pragma windows_only

// Don't show command prompt when opening this application,
// as it is a GUI app.
pragma windowed

// Compile and link against our windows resource file main.rc
pragma windres "main.rc"

// Import common items from the Adept standard library
import basics

// Import our bindings to the Win32 API
import "../../windows.adept"

// Define some ids that will be used to identify various controls and assets in our application
define IDI_MAINICON = 1000
define IDC_TEXT_FILENAME_TEXT = 101
define IDC_BUTTON_OPENFILE = 102
define IDC_BUTTON_SAVEFILE = 103
define IDC_EDIT1 = 104

// Global varaibles
// Our class name for our Win32 window
g_szClassName LPCSTR = 'myBasicEditor'
// Handle to static text #1
g_hwndText1 HWND
// Filename of currently open file in order to save it later
g_filename String

// ------------- setText -------------
// Sets the text of a win32 static text control
// `hwnd` - The parent window
// `id` - The id of the static text
// `new_text` - The new text content
func setText(hwnd HWND, id int, new_text String){
    // Convert Adept String to C-String
    new_text_cstr *ubyte = new_text.cstr()
    defer delete new_text_cstr

    // ----- Set the text

    // Set text of static text control
    SetDlgItemText(hwnd, id, new_text_cstr)

    // ----- Redraw the static text control

    // Get handle to static text control
    hctrl HWND = GetDlgItem(hwnd, id)

    // Get area that the static control occupies
    rect RECT
    GetClientRect(hctrl, &rect)

    // Map area that static control occupies to main window coordinates
    MapWindowPoints(hctrl, hwnd, &rect as *POINT, 2)

    // Invalidate the area (will cause redraw for that area)
    InvalidateRect(hwnd, &rect, true)
}

// ------------- openDialog -------------
// Asks the user to select a file using the standard
// win32 open file dialog.
// Returns the selected filename when successful.
// Returns "" when cancelled or error occurred.
func openDialog String {
    // Small buffer on stack to hold input filename
    szFile 260 ubyte

    // Since we are storing \0 characters in filter, we will need either String or ubyte buffer
    // (regular c-string literals in Adept 2.7 do not preserve anything after first \0)
    filter String = "All Files\0*.*\0Text Files\0*.txt\0\0"

    // Configure open file dialog
    ofn OPENFILENAMEA
    ofn.lStructSize = sizeof(ofn)
    ofn.hwndOwner = null
    ofn.lpstrFile = szFile at 0
    ofn.nMaxFile = sizeof(szFile)
    ofn.lpstrFilter = filter.array // HACK: Access raw buffer of string
    ofn.nFilterIndex = 1
    ofn.lpstrFileTitle = null
    ofn.nMaxFileTitle = 0
    ofn.lpstrInitialDir = null
    ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST

    // Show dialog
    if GetOpenFileNameA(&ofn) {
        // Return filename selected if success
        return String(ofn.lpstrFile)
    }

    // Return nothing if cancelled or an error occurred
    return ""
}

// Step 4: the Window Procedure
// ------------- WndProc -------------
// This procedure is responsible for handling
// win32 events
stdcall func WndProc(hwnd HWND, msg UINT, wParam WPARAM, lParam LPARAM) LRESULT {
    switch msg {
        case WM_CLOSE
            // Close the window if x was clicked
            DestroyWindow(hwnd)
        case WM_DESTROY
            // Exit application
            PostQuitMessage(0)
        case WM_CTLCOLORSTATIC
            // Set background for static texts to be transparent
            SetBkMode(wParam as HDC, TRANSPARENT)
            return GetStockObject(HOLLOW_BRUSH) as LRESULT
        case WM_COMMAND
            // Handle events for our controls
            switch LOWORD(wParam) {
            case IDC_BUTTON_OPENFILE
                // The open file button was clicked

                // Open file selection dialog to request that user selects a filename
                filename String = openDialog()

                // If the user selected a file, we will change the static text we created to show what filename they selected.
                // Then we will also change the text of our edit control to be the contents of the file.
                if filename != "" {
                    // Remember what file we have open
                    // NOTE: We have to `.commit()` or `.clone()` the string, as `g_filename` will outlive the `filename` variable
                    g_filename = filename.commit()

                    // Set the text of our static text control to be the filename we selected
                    setText(hwnd, IDC_TEXT_FILENAME_TEXT, filename)

                    // Set our edit text control to have the contents of the file we opened
                    setText(hwnd, IDC_EDIT1, loadFileContents(filename))
                }
            case IDC_BUTTON_SAVEFILE
                // The save file button was clicked

                // Get our edit text control
                edittext HWND = GetDlgItem(hwnd, IDC_EDIT1)

                // Allocate raw buffer for contents
                buffer_size usize = GetWindowTextLengthA(edittext) + 1
                buffer *ubyte = new ubyte * buffer_size
                defer delete buffer

                // Read contents from edit text control
                GetWindowTextA(edittext, buffer, buffer_size)

                // Write to file
                saveFileContents(g_filename, StringView(buffer))
            }
    }

    return DefWindowProc(hwnd, msg, wParam, lParam)
}

// ------------- WinMain -------------
// This procedure is the entry point
// for our win32 application
external stdcall func WinMain(hInstance, _hPrevInstance HINSTANCE, _lpCmdLine LPSTR, nCmdShow int) int {
    // Create our window class
    wc WNDCLASSEX
    wc.cbSize        = sizeof WNDCLASSEX
    wc.style         = 0
    wc.lpfnWndProc   = func &WndProc
    wc.cbClsExtra    = 0
    wc.cbWndExtra    = 0
    wc.hInstance     = hInstance
    wc.hIcon         = LoadIcon(GetModuleHandle(null), MAKEINTRESOURCEA(IDI_MAINICON))
    wc.hCursor       = LoadCursor(null, IDC_ARROW)
    wc.hbrBackground = cast HBRUSH (COLOR_WINDOW + 1)
    wc.lpszMenuName  = null
    wc.lpszClassName = g_szClassName
    wc.hIconSm       = LoadImage(GetModuleHandle(null), MAKEINTRESOURCEA(IDI_MAINICON), IMAGE_ICON, 16, 16, 0) as HICON

    if !RegisterClassEx(&wc) {
        MessageBox(null, 'Window Registration Failed!', 'Error!', MB_ICONEXCLAMATION | MB_OK)
        return 0
    }

    // Create our window
    hwnd HWND = CreateWindowEx(
        WS_EX_CLIENTEDGE,
        g_szClassName,
        'Basic Text Editor',
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 640, 480,
        null, null, hInstance, null)

    // Ensure we created our window successfully
    if hwnd == null {
        MessageBox(null, 'Window Creation Failed!', 'Error!', MB_ICONEXCLAMATION | MB_OK)
        return 0
    }
    
    // Create static text control for the filename text
    g_hwndText1 = CreateWindowA('static', '<no file selected>', WS_VISIBLE | WS_CHILD, 10, 10, 500, 20, hwnd, IDC_TEXT_FILENAME_TEXT as HMENU, hInstance, null)

    // Create edit text control for editing the file content
    hwndEdit1 HWND = CreateWindow(
        'edit',
        '',
        WS_BORDER | WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_HSCROLL | ES_LEFT | ES_MULTILINE | ES_AUTOVSCROLL | ES_AUTOHSCROLL,
        0, 115, 617, 318,
        hwnd, IDC_EDIT1 as HMENU, hInstance, null
    );

    // Create button control for opening files
    hwndButton1 HWND = CreateWindowA('button', 'Open file', WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, 10, 40, 100, 50, hwnd, IDC_BUTTON_OPENFILE as HMENU, hInstance, null)

    // Create button control for closing files
    hwndButton2 HWND = CreateWindowA('button', 'Save file', WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, 120, 40, 100, 50, hwnd, IDC_BUTTON_SAVEFILE as HMENU, hInstance, null)

    // Get default font
    defaultFont HFONT = GetStockObject(DEFAULT_GUI_FONT) as HFONT

    // Use modern font for controls
    SendMessage(g_hwndText1, WM_SETFONT, defaultFont as WPARAM, true)
    SendMessage(hwndEdit1, WM_SETFONT, defaultFont as WPARAM, true)
    SendMessage(hwndButton1, WM_SETFONT, defaultFont as WPARAM, true)
    SendMessage(hwndButton2, WM_SETFONT, defaultFont as WPARAM, true)

    // Show window
    ShowWindow(hwnd, nCmdShow)
    UpdateWindow(hwnd)

    Msg MSG

    // Message loop
    while GetMessage(&Msg, null, 0, 0) > 0 {
        TranslateMessage(&Msg)
        DispatchMessage(&Msg)
    }

    return Msg.wParam
}

// ------------- loadFileContents -------------
// Small helper function to load the contents of a file.
// Returned content will use \r\n for line feeds.
// On failure, will show error message and return "".
func loadFileContents(filename String) String {
    // Convert Adept String to C-String
    filename_cstr *ubyte = filename.cstr()
    defer delete filename_cstr

    // Open file for reading
    file *FILE = fopen(filename_cstr, 'r')

    // Ensure we were able to open the file
    if file == null {
        // Failed to open file
        MessageBoxA(null, 'Failed to open file', 'Error', MB_ICONERROR | MB_OK)
        return ""
    }

    // Remember to close the file after we leave this function
    defer fclose(file)

    // ----- Read file in chunks and join together into single string
    result String
    buffer 256 ubyte = undef

    // While more content left to read, read upto 256 bytes into `buffer`
    while fgets(buffer at 0, sizeof(buffer), file) {
        // For each character that was read,
        // append it to the resulting string.
        // For newlines, convert them to \r\n.

        repeat static strlen(buffer at 0) {
            if(buffer[idx] == '\n'ub){
                result.append("\r\n")
            } else {
                result.append(buffer[idx])
            }
        }
    }

    // Return file contents
    // NOTE: We have to use `.commit()` or `.clone()` because the returned string will
    // outlive the `result` variable.
    return result.commit()
}

// ------------- saveFileContents -------------
// Small helper function to save the contents of a file.
// Returns whether successful.
// Ignores \r characters when writing.
func saveFileContents(filename String, contents String) successful {
    // Convert Adept String to C-String
    filename_cstr *ubyte = filename.cstr()
    defer delete filename_cstr

    // Open file for writing
    file *FILE = fopen(filename_cstr, 'w')
    
    // Ensure we were able to open the file
    if file == null {
        // Failed to save file
        MessageBoxA(null, 'Failed to save file', 'Error', MB_ICONERROR | MB_OK)
        return false
    }

    // Remember to close the file after we leave this function
    defer fclose(file)

    // Write each character to file
    each ubyte in contents {
        // Ignore carriage returns
        if it == '\r'ub {
            continue
        }

        // Write single character to file
        fputc(it, file)
    }

    // Tell user that we successfully saved the file
    MessageBoxA(null, 'File saved successfully', 'File saved', MB_ICONINFORMATION | MB_OK)
    return true
}
