
pragma compiler_version '2.8'
pragma windows_only
pragma windowed
pragma windres "main.rc"

import basics
import "../../windows.adept"

define IDI_MAINICON = 1000
define IDC_TEXT_FILENAME_TEXT = 101
define IDC_BUTTON_OPENFILE = 102
define IDC_BUTTON_SAVEFILE = 103
define IDC_EDIT1 = 104

g_szClassName LPCSTR = 'myBasicEditor'
g_hwndText1 HWND
g_filename String

func setText(hwnd HWND, id int, new_text String){
    // Convert String to C-String
    new_text_cstr *ubyte = new_text.cstr()
    defer delete new_text_cstr

    // Set text of static text control
    SetDlgItemText(hwnd, id, new_text_cstr)

    // Get handle to static text control
    hctrl HWND = GetDlgItem(hwnd, id)

    // Get area that the static control occupies
    rect RECT
    GetClientRect(hctrl, &rect)

    // Map area that static control occupies to main window coordinates
    MapWindowPoints(hctrl, hwnd, &rect as *POINT, 2)

    // Invalidate the area (will cause redraw for that area)
    InvalidateRect(hwnd, &rect, true)
}

func openDialog String {
    // Buffer to hold input filename
    szFile 260 ubyte

    // Since we are storing \0 characters in filter, we will need either String or ubyte buffer
    // (regular c-string literals in Adept 2.7 do not preserve anything after first \0)
    filter String = "All Files\0*.*\0Text Files\0*.txt\0\0"

    // Configure open file dialog
    ofn OPENFILENAMEA
    ofn.lStructSize = sizeof(ofn)
    ofn.hwndOwner = null
    ofn.lpstrFile = szFile at 0
    ofn.nMaxFile = sizeof(szFile)
    ofn.lpstrFilter = filter.array // access raw buffer of string
    ofn.nFilterIndex = 1
    ofn.lpstrFileTitle = null
    ofn.nMaxFileTitle = 0
    ofn.lpstrInitialDir = null
    ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST

    // Show dialog
    if GetOpenFileNameA(&ofn) {
        // Return filename selected if success
        return String(ofn.lpstrFile)
    }

    // Return nothing if cancelled or an error occurred
    return ""
}

// Step 4: the Window Procedure
stdcall func WndProc(hwnd HWND, msg UINT, wParam WPARAM, lParam LPARAM) LRESULT {
    switch msg {
        case WM_CLOSE
            DestroyWindow(hwnd)
        case WM_DESTROY
            PostQuitMessage(0)
        case WM_CTLCOLORSTATIC
            // Set background for static texts to be transparent
            SetBkMode(wParam as HDC, TRANSPARENT)
            return GetStockObject(HOLLOW_BRUSH) as LRESULT
        case WM_COMMAND
            switch LOWORD(wParam) {
            case IDC_BUTTON_OPENFILE
                // Open file selection dialog to request that user selects a filename
                filename String = openDialog()

                // If the user selected a file, we will change the static text we created to show what filename they selected.
                // Then we will also change the text of our edit control to be the contents of the file.
                if filename != "" {
                    g_filename = filename.commit()

                    setText(hwnd, IDC_TEXT_FILENAME_TEXT, filename)
                    setText(hwnd, IDC_EDIT1, loadFileContents(filename))
                }
            case IDC_BUTTON_SAVEFILE
                // Get edittext control
                edittext HWND = GetDlgItem(hwnd, IDC_EDIT1)

                // Allocate buffer for contents
                buffer_size usize = GetWindowTextLengthA(edittext) + 1
                buffer *ubyte = new ubyte * buffer_size
                defer delete buffer

                // Read contents from edittext
                GetWindowTextA(edittext, buffer, buffer_size)

                // Write to file
                saveFileContents(g_filename, StringView(buffer))
            }
    }

    return DefWindowProc(hwnd, msg, wParam, lParam)
}

external stdcall func WinMain(hInstance, _hPrevInstance HINSTANCE, _lpCmdLine LPSTR, nCmdShow int) int {
    wc WNDCLASSEX
    hwnd HWND
    Msg MSG

    // Step 1: Registering the Window Class
    wc.cbSize        = sizeof WNDCLASSEX
    wc.style         = 0
    wc.lpfnWndProc   = func &WndProc
    wc.cbClsExtra    = 0
    wc.cbWndExtra    = 0
    wc.hInstance     = hInstance
    wc.hIcon         = LoadIcon(GetModuleHandle(null), MAKEINTRESOURCEA(IDI_MAINICON))
    wc.hCursor       = LoadCursor(null, IDC_ARROW)
    wc.hbrBackground = cast HBRUSH (COLOR_WINDOW + 1)
    wc.lpszMenuName  = null
    wc.lpszClassName = g_szClassName
    wc.hIconSm       = LoadImage(GetModuleHandle(null), MAKEINTRESOURCEA(IDI_MAINICON), IMAGE_ICON, 16, 16, 0) as HICON

    if !RegisterClassEx(&wc) {
        MessageBox(null, 'Window Registration Failed!', 'Error!', MB_ICONEXCLAMATION | MB_OK)
        return 0
    }

    // Step 2: Creating the Window
    hwnd = CreateWindowEx(
        WS_EX_CLIENTEDGE,
        g_szClassName,
        'Basic Text Editor',
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 640, 480,
        null, null, hInstance, null)

    if hwnd == null {
        MessageBox(null, 'Window Creation Failed!', 'Error!', MB_ICONEXCLAMATION | MB_OK)
        return 0
    }
    
    g_hwndText1 = CreateWindowA('static', '<no file selected>', WS_VISIBLE | WS_CHILD, 10, 10, 500, 20, hwnd, IDC_TEXT_FILENAME_TEXT as HMENU, hInstance, null)

    hwndEdit1 HWND = CreateWindow(
        'edit',
        '',
        WS_BORDER | WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_HSCROLL | ES_LEFT | ES_MULTILINE | ES_AUTOVSCROLL | ES_AUTOHSCROLL,
        0, 115, 617, 318,
        hwnd, IDC_EDIT1 as HMENU, hInstance, null
    );

    hwndButton1 HWND = CreateWindowA('button', 'Open file', WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, 10, 40, 100, 50, hwnd, IDC_BUTTON_OPENFILE as HMENU, hInstance, null)
    hwndButton2 HWND = CreateWindowA('button', 'Save file', WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, 120, 40, 100, 50, hwnd, IDC_BUTTON_SAVEFILE as HMENU, hInstance, null)

    // Get default font
    defaultFont HFONT = GetStockObject(DEFAULT_GUI_FONT) as HFONT

    // Use modern font for controls
    SendMessage(g_hwndText1, WM_SETFONT, defaultFont as WPARAM, true)
    SendMessage(hwndEdit1, WM_SETFONT, defaultFont as WPARAM, true)
    SendMessage(hwndButton1, WM_SETFONT, defaultFont as WPARAM, true)
    SendMessage(hwndButton2, WM_SETFONT, defaultFont as WPARAM, true)

    ShowWindow(hwnd, nCmdShow)
    UpdateWindow(hwnd)

    // Step 3: The Message Loop
    while GetMessage(&Msg, null, 0, 0) > 0 {
        TranslateMessage(&Msg)
        DispatchMessage(&Msg)
    }

    return Msg.wParam
}

func loadFileContents(filename String) String {
    filename_cstr *ubyte = filename.cstr()
    defer delete filename_cstr

    file *FILE = fopen(filename_cstr, 'r')

    if file == null {
        // Failed to open file
        MessageBoxA(null, 'Failed to open file', 'Error', MB_ICONERROR | MB_OK)
        return ""
    }

    defer fclose(file)

    result String
    buffer 256 ubyte = undef

    while fgets(buffer at 0, sizeof(buffer), file) {
        repeat static strlen(buffer at 0) {
            if(buffer[idx] == '\n'ub){
                result.append("\r\n")
            } else {
                result.append(buffer[idx])
            }
        }
    }

    return result.commit()
}

func saveFileContents(filename String, contents String) successful {
    filename_cstr *ubyte = filename.cstr()
    defer delete filename_cstr

    file *FILE = fopen(filename_cstr, 'w')
    
    if file == null {
        // Failed to save file
        MessageBoxA(null, 'Failed to save file', 'Error', MB_ICONERROR | MB_OK)
        return false
    }

    defer fclose(file)

    // Write each character to file
    each ubyte in contents {
        // Ignore carriage returns
        if it == '\r'ub {
            continue
        }

        fputc(it, file)
    }

    MessageBoxA(null, 'File saved successfully', 'File saved', MB_ICONINFORMATION | MB_OK)
    return true
}
