
pragma compiler_version '2.8'
pragma windows_only
pragma windowed
pragma windres "main.rc"

import basics
import random
import "../../windows.adept"

define IDI_MAINICON = 1000
define IDC_TEXT_RESULT_TEXT = 101
define IDC_BUTTON_RANDOMIZE = 102

g_szClassName LPCSTR = 'randomAnimalPickerWindowClass'
g_hwndText1 HWND

func setText(hwnd HWND, id int, new_text String){
    // Convert String to C-String
    new_text_cstr *ubyte = new_text.cstr()
    defer delete new_text_cstr

    // Set text of static text control
    SetDlgItemText(hwnd, id, new_text_cstr)

    // Get handle to static text control
    hctrl HWND = GetDlgItem(hwnd, id)

    // Get area that the static control occupies
    rect RECT
    GetClientRect(hctrl, &rect)

    // Map area that static control occupies to main window coordinates
    MapWindowPoints(hctrl, hwnd, &rect as *POINT, 2)

    // Invalidate the area (will cause redraw for that area)
    InvalidateRect(hwnd, &rect, true)
}

// Step 4: the Window Procedure
stdcall func WndProc(hwnd HWND, msg UINT, wParam WPARAM, lParam LPARAM) LRESULT {
    switch msg {
        case WM_CLOSE
            DestroyWindow(hwnd)
        case WM_DESTROY
            PostQuitMessage(0)
        case WM_CTLCOLORSTATIC
            // Set background for static texts to be transparent
            SetBkMode(wParam as HDC, TRANSPARENT)
            return GetStockObject(HOLLOW_BRUSH) as LRESULT
        case WM_COMMAND
            switch LOWORD(wParam) {
            case IDC_BUTTON_RANDOMIZE
                setText(hwnd, IDC_TEXT_RESULT_TEXT, getRandomAnimal())
            }
    }

    return DefWindowProc(hwnd, msg, wParam, lParam)
}

external stdcall func WinMain(hInstance, _hPrevInstance HINSTANCE, _lpCmdLine LPSTR, nCmdShow int) int {
    randomize()

    wc WNDCLASSEX
    hwnd HWND
    Msg MSG

    // Step 1: Registering the Window Class
    wc.cbSize        = sizeof WNDCLASSEX
    wc.style         = 0
    wc.lpfnWndProc   = func &WndProc
    wc.cbClsExtra    = 0
    wc.cbWndExtra    = 0
    wc.hInstance     = hInstance
    wc.hIcon         = LoadIcon(GetModuleHandle(null), MAKEINTRESOURCEA(IDI_MAINICON))
    wc.hCursor       = LoadCursor(null, IDC_ARROW)
    wc.hbrBackground = cast HBRUSH (COLOR_WINDOW + 1)
    wc.lpszMenuName  = null
    wc.lpszClassName = g_szClassName
    wc.hIconSm       = LoadImage(GetModuleHandle(null), MAKEINTRESOURCEA(IDI_MAINICON), IMAGE_ICON, 16, 16, 0) as HICON

    if !RegisterClassEx(&wc) {
        MessageBox(null, 'Window Registration Failed!', 'Error!', MB_ICONEXCLAMATION | MB_OK)
        return 0
    }

    // Step 2: Creating the Window
    hwnd = CreateWindowEx(
        WS_EX_CLIENTEDGE,
        g_szClassName,
        'Random Animal Picker',
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 640, 480,
        null, null, hInstance, null)

    if hwnd == null {
        MessageBox(null, 'Window Creation Failed!', 'Error!', MB_ICONEXCLAMATION | MB_OK)
        return 0
    }
    
    g_hwndText1 = CreateWindowA('static', 'Click the button to pick a random animal!', WS_VISIBLE | WS_CHILD, 10, 10, 500, 20, hwnd, IDC_TEXT_RESULT_TEXT as HMENU, hInstance, null)
    hwndButton1 HWND = CreateWindowA('button', 'Randomize', WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, 10, 40, 100, 50, hwnd, IDC_BUTTON_RANDOMIZE as HMENU, hInstance, null)

    // Get default font
    defaultFont HFONT = GetStockObject(DEFAULT_GUI_FONT) as HFONT

    // Use modern font for controls
    SendMessage(g_hwndText1, WM_SETFONT, defaultFont as WPARAM, true)
    SendMessage(hwndButton1, WM_SETFONT, defaultFont as WPARAM, true)

    ShowWindow(hwnd, nCmdShow)
    UpdateWindow(hwnd)

    // Step 3: The Message Loop
    while GetMessage(&Msg, null, 0, 0) > 0 {
        TranslateMessage(&Msg)
        DispatchMessage(&Msg)
    }

    return Msg.wParam
}

func getRandomAnimal() String {
    animals <String> Array = {
        "Dog",
        "Cat",
        "Pig",
        "Bat",
        "Cow",
        "Moose",
        "Llama",
        "Sheep",
        "Snake",
        "Zebra",
        "Hedgehog",
        "Beaver",
        "Horse",
        "Monkey",
        "Ostrich",
        "Capybara",
        "Lizard",
        "Bird",
        "Tiger",
        "Snail",
        "Fish",
        "Crab",
        "Jellyfish",
        "Leopard",
        "Cheeta",
    }

    return animals[randomInt(animals.length)]
}
