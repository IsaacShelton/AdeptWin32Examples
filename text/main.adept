
pragma compiler_version '2.7'
pragma windows_only
pragma windowed

import basics
import "../windows.adept"

define IDC_TEXT_HELLO_WORLD = 101
define IDC_TEXT_THIS_IS_SOME_TEXT = 102
define IDC_TEXT_BYE = 102

// Step 4: the Window Procedure
stdcall func WndProc(hwnd HWND, msg UINT, wParam WPARAM, lParam LPARAM) LRESULT {
    switch msg {
        case WM_CLOSE
            DestroyWindow(hwnd)
        case WM_DESTROY
            PostQuitMessage(0)
        case WM_CTLCOLORSTATIC
            // Set background for static texts to be transparent
            SetBkMode(wParam as HDC, TRANSPARENT)
            return GetStockObject(HOLLOW_BRUSH) as LRESULT
    }

    return DefWindowProc(hwnd, msg, wParam, lParam)
}

g_szClassName LPCSTR = 'myWindowClass'

external stdcall func WinMain(hInstance, _hPrevInstance HINSTANCE, _lpCmdLine LPSTR, nCmdShow int) int {
    wc WNDCLASSEX
    hwnd HWND
    Msg MSG

    // Step 1: Registering the Window Class
    wc.cbSize        = sizeof WNDCLASSEX
    wc.style         = 0
    wc.lpfnWndProc   = func &WndProc
    wc.cbClsExtra    = 0
    wc.cbWndExtra    = 0
    wc.hInstance     = hInstance
    wc.hIcon         = LoadIcon(NULL, IDI_APPLICATION)
    wc.hCursor       = LoadCursor(NULL, IDC_ARROW)
    wc.hbrBackground = cast HBRUSH (COLOR_WINDOW + 1)
    wc.lpszMenuName  = NULL
    wc.lpszClassName = g_szClassName
    wc.hIconSm       = LoadIcon(NULL, IDI_APPLICATION)

    if !RegisterClassEx(&wc) {
        MessageBox(NULL, 'Window Registration Failed!', 'Error!', MB_ICONEXCLAMATION | MB_OK)
        return 0
    }

    // Step 2: Creating the Window
    hwnd = CreateWindowEx(
        WS_EX_CLIENTEDGE,
        g_szClassName,
        'The title of my window',
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 640, 480,
        NULL, NULL, hInstance, NULL)

    if hwnd == NULL {
        MessageBox(NULL, 'Window Creation Failed!', 'Error!', MB_ICONEXCLAMATION | MB_OK)
        return 0
    }
    
    _hwndText1 HWND = CreateWindowA('static', 'Hello World!', WS_VISIBLE | WS_CHILD, 10, 10, 100, 20, hwnd, IDC_TEXT_HELLO_WORLD as HMENU, hInstance, null)
    _hwndText2 HWND = CreateWindowA('static', 'Here is some text', WS_VISIBLE | WS_CHILD, 100, 300, 200, 20, hwnd, IDC_TEXT_THIS_IS_SOME_TEXT as HMENU, hInstance, null)
    _hwndText3 HWND = CreateWindowA('static', 'Bye', WS_VISIBLE | WS_CHILD, 300, 100, 200, 20, hwnd, IDC_TEXT_BYE as HMENU, hInstance, null)

    ShowWindow(hwnd, nCmdShow)
    UpdateWindow(hwnd)

    // Step 3: The Message Loop
    while GetMessage(&Msg, NULL, 0, 0) > 0 {
        TranslateMessage(&Msg)
        DispatchMessage(&Msg)
    }

    return Msg.wParam
}